# -*- coding: utf-8 -*-
"""
Created on Tue Jul 21 13:39:31 2020

@author: adity
"""

# DENCO Case Study
# 
# Denco Corp Case Details
# Denco is manufacturing company selling parts to various customers at various regions with various cost and margins.
# 
# Objective
# Expand Business by encouraging loyal customers to
#     Improve repeated sales
#     Maximise revenue from high value parts
#
# Information Required
#     Who are the most loyal Customers - Improve repeated sales, Target customers with low sales Volumes
#     Which customers contribute the most to their revenue - How do I retain these customers & target incentives
#     What part numbers bring in to significant portion of revenue - Maximise revenue from high value parts
#     What parts have the highest profit margin - What parts are driving profits & what parts need to build further
#
# Find out :-
#     Who are the most loyal Customers -
#         Make customer table, See customer transaction,
#         Sort Customer Transaction
#         How many times are these customers buying from me
#         Select the Top 5 or 10 rows (Sorted in Descending Order of Frequency)
#
#     Which customers contribute the most to their revenue
#         Sum the revenue by each customer
#         Sort revenue by customers in descending Order
#
#     What part numbers bring in to significant portion of revenue
#         Sum/ Group the revenue by part no
#         Sort the revenue by decreasing order
#         Top revenue by part nos
#
#     What parts have the highest profit margin ?
#         Sum the margin by partno
#         Sort the margin by decreasing order
#         Parts contributing highest profit margin
#
#     Who are their top buying customers
#
#     Who are the customers who are bringing more revenue
#
#

#%%

import pandas as pd

# Import the Denco Case Data CSV file
data = pd.read_csv('denco.csv')
print(data)

# Data sorted by total number of customer transactions
cust_trans = data[['custname','revenue']]
print(cust_trans)

cust_trans_count = cust_trans[['custname','revenue']].groupby(['custname'])['revenue'] \
    .count() \
        .reset_index(name='count') \
            .sort_values(['count'], ascending = False)

# Top 5 Loyal Customers
print(cust_trans_count.head())
cust_trans_count


# Data sorted by sum of customer generated revenue
cust_trans_revenue = cust_trans[['custname','revenue']].groupby(['custname'])['revenue'] \
    .sum() \
        .reset_index(name='sum') \
            .sort_values(['sum'], ascending = False)

# Top 5 Revenue Generating Customers
print(cust_trans_revenue.head())


# Data sorted by sum of revenue generated by part number
partnum_trans = data[['partnum','revenue']]
print(partnum_trans)

partnum_trans_revenue = partnum_trans[['partnum','revenue']].groupby(['partnum'])['revenue'] \
    .sum() \
        .reset_index(name='sum') \
            .sort_values(['sum'], ascending = False)

# Top 5 Revenue Generating Part Numbers
print(partnum_trans_revenue.head())


# Data sorted by sum of profit margin generated by part number
partnum_margin = data[['partnum','margin']]
print(partnum_margin)

partnum_margin_sum = partnum_margin[['partnum','margin']].groupby(['partnum'])['margin'] \
    .sum() \
        .reset_index(name='sum') \
            .sort_values(['sum'], ascending = False)

# Top 5 Profit Margin Generating Part Numbers
print(partnum_margin_sum.head())




# Data sorted by total number of customer transactions and sum of revenue
cust_trans = data[['custname','revenue']]
print(cust_trans)

cust_trans_count = cust_trans[['custname','revenue']].groupby(['custname'])['revenue'] \
    .count() \
        .reset_index(name='count') \
            .sort_values(['count'], ascending = False)

# Top 5 Loyal Customers
print(cust_trans_count.head())
cust_trans_count


# Data sorted by customer transactions to find customers with just one transaction





# sorting data to find which Region has the most sales
cust_region = data[['region','custname']].drop_duplicates()
cust_region

type(cust_region)
dir(cust_region)

cust_region_count = cust_region[['region','custname']].groupby(['region'])['custname'] \
    .count() \
        .reset_index(name='count') \
            .sort_values(['count'], ascending = False)

cust_region_count

region = list(cust_region_count['region'])
region

customer_name = list(cust_region_count['custname'])
plt.figure()

cust_region_count    
    
#    .aggregate('count').reset_index().sort('custname', ascending = false)







denco2 = denco1.groupby('custname').size()
denco2

denco1.groupby('custname').size().plot(kind='bar')

denco2 = denco1['revenue'].groupby(denco1['custname'])
denco2

denco1.groupby('custname').sum('')



denco2
denco3 = sorted(denco2)
denco3
denco3.head
dir(denco1)
denco1.head()

denco1.groupby('custname')['revenue'].sum()

